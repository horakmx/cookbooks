#
# This is an example VCL file for Varnish.
#
# It does not do anything by default, delegating control to the
# builtin VCL. The builtin VCL is called when there is no explicit
# return statement.
#
# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
# and http://varnish-cache.org/trac/wiki/VCLExamples for more examples.

# Marker to tell the VCL compiler that this VCL has been adapted to the
# new 4.0 format.
vcl 4.0;

# Default backend definition. Set this to point to your content server.
backend default {
    .host = "<%= node['nemo']['apache_host'] %>";
    .port = "<%= node['nemo']['apache_port'] %>";
    .first_byte_timeout = 300s;
}

sub vcl_recv {
    # Happens before we check if we have this in cache already.
    # 
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.

    # You don't wish to cache content for logged in users
    # unset req.http.cookie;

 # Pass if request contains these parameters in query string
    if (req.url ~ "(\?|&)(purgeVarnish|displayDebug|clearCache|clearWSCache)") {
        # Purge requested URL (w/o query string) if "purgeVarnish" parameter is present
        if(req.url  ~ "(\?|&)purgeVarnish")
        {
                ban("req.url == " + regsub(req.url, "(\?.*)$", "") + " && req.http.host == " + req.http.Host);
        }
        return (pass);
    }

     set req.url = regsub(req.url, "(\?.*)$", "");

    return(hash);
}

sub vcl_backend_response {
    # Happens after we have read the response headers from the backend.
    # 
    # Here you clean the response headers, removing silly Set-Cookie headers
    # and other mistakes your backend does.
    # Varnish determined the object was not cacheable

   if (beresp.ttl <= 0s) {
        set beresp.http.X-Cacheable = "NO:Not Cacheable";
        set beresp.uncacheable = true;
    } elsif (beresp.http.Cache-Control ~ "private") {
        set beresp.http.X-Cacheable = "NO:Cache-Control=private";
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
    # Varnish determined the object was cacheable
    }
    else 
    {
       set beresp.http.X-Cacheable = "YES";
    }


    set beresp.do_esi=true;
    return(deliver);
}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    # 
    # You can do accounting or modifying the final object here.
        if (obj.hits > 0)
         {
            set resp.http.X-Cache = "HIT";
         }
         else
         {
            set resp.http.X-Cache = "MISS";
         }
}

sub vcl_backend_fetch {
   
  # You are respecting the Cache-Control=private header from the backend
#   if (req.http.Cookie ~ "(UserID|_session)") {
#
#        set beresp.http.X-Cacheable = "NO:Got Session";
       #return(hit_for_pass);
#   }

}
